<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>The Bedroom Laboratory</title>
  
  <subtitle>A small apartment leaves little alternative</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://thebedlab.com/"/>
  <updated>2017-09-21T15:20:23.000Z</updated>
  <id>http://thebedlab.com/</id>
  
  <author>
    <name>The Bedroom Laboratory</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>API Month Day 11 - Movies</title>
    <link href="http://thebedlab.com/2016/06/07/api-month-day-11-movies/"/>
    <id>http://thebedlab.com/2016/06/07/api-month-day-11-movies/</id>
    <published>2016-06-07T16:36:55.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/wp-content/uploads/2015/11/API.png">API.png</a></p><p><strong>API purpose</strong> Interfacing and searching IMDB database</p><p><strong>Signup</strong> not needed</p><p><strong>Documentation</strong> <a href="http://www.omdbapi.com/" target="_blank" rel="external">http://www.omdbapi.com/</a></p><p><strong>Github</strong> <a href="https://github.com/gregario/API-Month/tree/master/Day11%20Movies" target="_blank" rel="external">Click here for link</a></p><p><strong>Comment</strong> Surprisingly fun game</p><p>So I went to a games night last night to decide who got what teams for the upcoming Euros 2016. I do live an exciting life. Anywho we play a game sometimes where you pick a number in days, hours and minutes and have to name 3 boxsets of popular TV that would get you there.</p><p>We found some inconsistencies (and were running out of games) so I had a quick look at the omdbapi (open movie database API) to see how the data was being gathered. I found a quick call that would return the IMDB ratings of movies so I whipped up a quick script to calculate the sum of an arbitrary number of movies.</p><p>See attached  link in the header for the source. It’s very short and is a pretty standard requests format if you’ve seen any of my other posts. The one style change I made was to use raw_input() instead of a sys.argv() to pass arguments to the script. It’s a lot neater and more flexible for the sort of scripts I’ve been writing so I think I’ll change to using it in the future.</p><p>I also won that round …;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2015/11/API.png&quot;&gt;API.png&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API purpose&lt;/strong&gt; Interfacing and searching IMDB database&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
      <category term="Month" scheme="http://thebedlab.com/tags/Month/"/>
    
  </entry>
  
  <entry>
    <title>API Month Day 10 - Oasis or Blur</title>
    <link href="http://thebedlab.com/2015/12/10/api-month-day-10-twitter-mood/"/>
    <id>http://thebedlab.com/2015/12/10/api-month-day-10-twitter-mood/</id>
    <published>2015-12-10T14:03:25.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="/wp-content/uploads/2015/12/oasisorblur.jpg">oasisorblur</a></p><p><strong>API purpose</strong> Interfacing and searching twitter</p><p><strong>Signup</strong> <a href="https://dev.twitter.com/apps/new" target="_blank" rel="external">https://dev.twitter.com/apps/new</a></p><p><strong>Documentation</strong> <a href="https://dev.twitter.com/rest/public" target="_blank" rel="external">https://dev.twitter.com/rest/public</a></p><p><strong>Github</strong> <a href="https://github.com/gregario/API-Month/tree/master/Day10%20Twitter" target="_blank" rel="external">Click here for link</a></p><p><strong>Comment</strong> So much that could be done with this</p><p>Today is so easy. After reading into the Twitter API it became obvious that people had written so much on this subject. So to get started you do the following.</p><p>After running</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">easy_install twitter</div></pre></td></tr></table></figure><p>Just look at this resource: <a href="https://github.com/ideoforms/python-twitter-examples" target="_blank" rel="external">https://github.com/ideoforms/python-twitter-examples </a></p><p>It’s so good, gives examples for searching by hashtag (both as a sample or from the streaming service), searching by area, posting to your feed and doing a bunch of general analytics.</p><p>Make sure you have installed twitter tools (via the above command) and not python-twitter which is a separate set of tools. This lead to a bit of confusion on my part. I wrote a simple app that searches hashtags for Oasis and Blur to answer the age old question once and for all. Enjoy!</p><p>Apparently it’s Blur!</p><p><a href="/wp-content/uploads/2015/12/Day10Output.jpg">Day10</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;/wp-content/uploads/2015/12/oasisorblur.jpg&quot;&gt;oasisorblur&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API purpose&lt;/strong&gt; Interfacing and searching twitt
      
    
    </summary>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>API Month Day 9 - Petrol Stations</title>
    <link href="http://thebedlab.com/2015/12/09//2015/12/09/api-month-day-9-petrol-stations//"/>
    <id>http://thebedlab.com/2015/12/09//2015/12/09/api-month-day-9-petrol-stations//</id>
    <published>2015-12-09T15:22:16.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>API purpose</strong> Interfacing and searching google maps</p><p><strong>Signup</strong> Via your google account</p><p><strong>Documentation</strong> <a href="https://developers.google.com/places/" target="_blank" rel="external">Click here for link</a></p><p><strong>Comment</strong> So much that could be done with this</p><p>Today I wanted to play with the google places API. Its very cool, it lets you search within a distance of your current location for various services. Pretty cool to see from this what’s around you. You can even pull out reviews from the locations!</p><p>So I wrote a script that takes in an address and checks for nearby petrol stations. Nice little function that could easily be extended to take in any service in your area from user input.</p><p>Nothing too tricky today, but it turns out there are not very many petrol stations in my area. I did change the argv input to a raw_input prompt from the user, its a little bit nicer and means you can be dynamically prompted for inputs during the programs operation without having to build a GUI. This can be used later to build simple command line menus etc…</p><p>Here is an example output from the script:</p><p><a href="/wp-content/uploads/2015/12/Day9Output.jpg">Day9Output</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;API purpose&lt;/strong&gt; Interfacing and searching google maps&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signup&lt;/strong&gt; Via your google account&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
      
    
    </summary>
    
      <category term="Uncategorised" scheme="http://thebedlab.com/categories/Uncategorised/"/>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>API Month Day 8 - SPACE</title>
    <link href="http://thebedlab.com/2015/12/08//2015/12/08/api-month-day-8-space//"/>
    <id>http://thebedlab.com/2015/12/08//2015/12/08/api-month-day-8-space//</id>
    <published>2015-12-08T13:29:51.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>API purpose</strong> Finding information about the International Space Station</p><p><strong>Signup</strong> No signup necessary</p><p><strong>Documentation</strong> <a href="http://open-notify.org/Open-Notify-API/" target="_blank" rel="external">http://open-notify.org/Open-Notify-API/</a></p><p><strong>Github</strong> <a href="https://github.com/gregario/API-Month/tree/master/Day8%20International%20Space%20Station" target="_blank" rel="external">Click here for link</a></p><p><strong>Comment</strong> Really fun dataset to play with</p><p>I did promise some time manipulation stuff today  but it was super boringso I got interested in space instead. Fellow bedlabber (that’s a word) vykta sent on a link to Urethcast, a service which provides pictures from the International Space Station (ISS). He’s promised to write up a post on it this month so stay tuned for that. It did get me thinking about what other sources of open data are available from the ISS.</p><p>I did some googling and found open-notify, a wrapper API for some of the data Nasa puts out. Turns out space agencies have a good understanding of where the ISS is at any given time, who would have thought? Open-notify provides information on where the ISS is, when it will be visible over a given GPS coordinates and who is on board. All cool stuff 🙂</p><p>It did give me the opportunity to implement a few things:</p><ul><li><p>Epoch converter, epoch time (or unix time) is time quoted in seconds since 00:00:00 UTC on Thursday, 1 January 1970. Its useful for comparing times on servers but is not very human readable.</p></li><li><p>Reverse geocoding, for if I got a set of GPS coordinates and want a real address, I’ve made a function for that now</p></li></ul><p>Its a nice little script, returns a little table of data like so:</p><p><a href="/wp-content/uploads/2015/12/Day8-Output.png">Day8 Output</a></p><p>I also realised I’ve been consistently spelling longitude incorrectly all week for my variables. Oh well. Check out the code, again its all commented so hopefully is understandable. Any questions pop them in the comments.</p><p>All the code is on the github. I’ve realised that its not exactly readable without the indents now that my programs are more complex. I’ll have a read on the wordpress nexus to see how its done and maybe only copy the interesting bits from now on.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;API purpose&lt;/strong&gt; Finding information about the International Space Station&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signup&lt;/strong&gt; No signup necessary
      
    
    </summary>
    
      <category term="Uncategorised" scheme="http://thebedlab.com/categories/Uncategorised/"/>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>API Month Day 7 - Where is my air?</title>
    <link href="http://thebedlab.com/2015/12/07//2015/12/07/api-month-day-7-where-is-my-air//"/>
    <id>http://thebedlab.com/2015/12/07//2015/12/07/api-month-day-7-where-is-my-air//</id>
    <published>2015-12-07T15:03:47.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>API purpose: Finding local air quality from address</p><p>Signup: air quality has no signup google, as always, does.</p><p>Documentation: <a href="https://developers.google.com/maps/web-services/client-library" target="_blank" rel="external">https://developers.google.com/maps/web-services/client-library</a></p><p>Github: <a href="https://github.com/gregario/API-Month/tree/master/Day7%20AQ%20Project" target="_blank" rel="external">https://github.com/gregario/API-Month/tree/master/Day7%20AQ%20Project</a></p><p>Comment: Wrapping up the first week into a useful script</p><p>So today was a culmination of all the learnings I achieved this week…. A bit of background on this one. I decided to do something a bit more abitious today. Since I now have the basic building blocks of data for getting and manipulating JSON API data I thought I would put it to the test for something more than one localised test. So today I’m going to build something chunkier. Using the work I’ve done all week from data manipulation, geocaching and the air quality API, I want to build an app that if you put in a post code in London it finds the nearest AQ monitor from the list and returns its air quality data.</p><p>This is more challenging than it sounds, the basic work flow would be.</p><p>Take input address and convert to GPS. Pull down list of all London Air Quality monitors and extract their locations. Do a diff between the two to find the closest distance from that new list. Then from that new list pull down a list of sensors associated with that sensor. Then from this pull down their data and average it for the day.</p><p>What I can then use this to do is to give Air quality information as an extension to map or location searches. An interesting wrapper library for future work. I’m going to try some more complex error handling in this too, as I’ve been pretty lax with this up until now.</p><p>As I’ve moved onto commenting inline the code should be self explanatory, it produces some nice pretty outputs too!</p><p><a href="wp-content/uploads/2015/12/Screenshot-2015-12-07-12.29.20.png">Screenshot</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="comment"># Day seven of the month of API</span></div><div class="line"><span class="comment"># Today finds your nearest Air Quality monitor and returns its data</span></div><div class="line"><span class="comment"># Greg Jackson @gr3gario on twitter and gregario on github</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json </div><div class="line"><span class="keyword">import</span> sys  </div><div class="line"><span class="keyword">import</span> googlemaps</div><div class="line"><span class="keyword">from</span> APIKEY <span class="keyword">import</span> googlekey</div><div class="line"><span class="keyword">import</span> math</div><div class="line"></div><div class="line"><span class="comment">## Workflow</span></div><div class="line"><span class="comment">#Pull down list of all London Air Quality monitors and extract their locations. </span></div><div class="line"><span class="comment">#Do a diff between the two to find the closest distance from that new list.</span></div><div class="line"><span class="comment">#Then from that monitor pull out its air quality monitor. </span></div><div class="line"></div><div class="line"><span class="comment"># This function takes in a command line post code (or address), performs a google maps call to check its GPS data and returns as a list</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">addtoGPS</span><span class="params">()</span>:</span></div><div class="line">attempts = <span class="number">0</span></div><div class="line">latlng = []</div><div class="line"></div><div class="line"><span class="keyword">while</span> attempts &lt; <span class="number">3</span>:</div><div class="line"><span class="keyword">try</span>:</div><div class="line">gmaps = googlemaps.Client(key=googlekey) <span class="comment"># Get key from your google developer portal. </span></div><div class="line"><span class="comment"># Geocoding an address</span></div><div class="line">geocode_result = gmaps.geocode(sys.argv[<span class="number">1</span>]) <span class="comment"># passes address given on command line to google maps geocoding api</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> geocode_result: <span class="comment"># the returned object is a list with nested JSON objects inside each list. So you need to iterate through the list and do operations on each object separately</span></div><div class="line">latlng.append(float(key[<span class="string">'geometry'</span>][<span class="string">'bounds'</span>][<span class="string">'northeast'</span>][<span class="string">'lat'</span>])) <span class="comment"># pulls out nested latitude figure from call</span></div><div class="line">latlng.append(float(key[<span class="string">'geometry'</span>][<span class="string">'bounds'</span>][<span class="string">'northeast'</span>][<span class="string">'lng'</span>])) <span class="comment"># pulls out nested longditude figure from call</span></div><div class="line"><span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="keyword">except</span>:</div><div class="line">attempts += <span class="number">1</span></div><div class="line"><span class="keyword">print</span> <span class="string">"Error getting data from Google maps API"</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> latlng</div><div class="line"></div><div class="line"><span class="comment"># This function calls the London Air Quality API and returns a list of all the sites with their GPS Coordinates </span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">LAQNList</span><span class="params">()</span>:</span></div><div class="line">url = <span class="string">"http://api.erg.kcl.ac.uk/AirQuality/Information/MonitoringSites/GroupName=All/JSON"</span> <span class="comment"># Gives all units in London for AQ</span></div><div class="line">siteDetails=[]</div><div class="line">siteDetail=&#123;&#125;</div><div class="line">attempts=<span class="number">0</span></div><div class="line">distance = <span class="number">0.0</span></div><div class="line"></div><div class="line"><span class="keyword">while</span> attempts &lt; <span class="number">3</span>:</div><div class="line"><span class="keyword">try</span>: </div><div class="line">r = requests.get(url).json() <span class="comment"># Make a request to the TFL API for data</span></div><div class="line">q = r[<span class="string">'Sites'</span>][<span class="string">'Site'</span>] <span class="comment"># This extracts the list from the JSON object</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> q:</div><div class="line"><span class="comment"># This is quite elegant. There are closed air quality units on the system which we want to ignore. So we check the dateclosed field. If its emply we include the unit. </span></div><div class="line">dateclosed = key [<span class="string">'@DateClosed'</span>] </div><div class="line"><span class="keyword">if</span> <span class="keyword">not</span> dateclosed: </div><div class="line">sitecode = key[<span class="string">'@SiteCode'</span>]</div><div class="line">latitude = float(key[<span class="string">'@Latitude'</span>])</div><div class="line">longditude = float(key[<span class="string">'@Longitude'</span>])</div><div class="line">siteDetail=&#123;<span class="string">'sitecode'</span>: sitecode, <span class="string">'latitude'</span>: latitude, <span class="string">'longditude'</span>: longditude, <span class="string">'distance'</span>:distance&#125;</div><div class="line">siteDetails.append(siteDetail)</div><div class="line"><span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="keyword">except</span>:</div><div class="line">attempts += <span class="number">1</span></div><div class="line"><span class="comment">#print "Error getting Location data from LAQN API"</span></div><div class="line"></div><div class="line"><span class="keyword">return</span> siteDetails</div><div class="line"></div><div class="line"><span class="comment"># This function takes input values and calculates distance for every point and calculates the closest site code</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">()</span>:</span></div><div class="line">    latlngin = addtoGPS()</div><div class="line">    siteDetails=LAQNList()</div><div class="line">    distance = []</div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> siteDetails:</div><div class="line">    lat = float(key [<span class="string">'latitude'</span>])</div><div class="line">    lng = float(key [<span class="string">'longditude'</span>])</div><div class="line">    output = math.sqrt((latlngin[<span class="number">0</span>] - lat)**<span class="number">2</span> + (latlngin[<span class="number">1</span>] - lng)**<span class="number">2</span>)</div><div class="line">    key[<span class="string">'distance'</span>] = output</div><div class="line">    distance.append(output)</div><div class="line"></div><div class="line">    mindistance = min(distance)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> siteDetails:</div><div class="line">    check = key[<span class="string">'distance'</span>]</div><div class="line">    <span class="keyword">if</span> check == mindistance: </div><div class="line">    finalsite = key[<span class="string">'sitecode'</span>]</div><div class="line"></div><div class="line">    <span class="keyword">return</span> finalsite</div><div class="line"></div><div class="line"><span class="comment">## I now have my closest Air Quality Monitor, need to call this and see what sensors it has</span></div><div class="line"><span class="comment">## back to the API documentation</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">whatSensor</span><span class="params">()</span>:</span></div><div class="line">siteCode = distance()</div><div class="line">speciesCode = []</div><div class="line">attempts = <span class="number">0</span> </div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">while</span> attempts &lt; <span class="number">3</span>:</div><div class="line"><span class="keyword">try</span>: </div><div class="line">url= <span class="string">"http://api.erg.kcl.ac.uk/AirQuality/Daily/MonitoringIndex/Latest/SiteCode="</span> +siteCode+ <span class="string">"/json"</span></div><div class="line">r = requests.get(url).json() <span class="comment"># Make a request to the TFL API for data</span></div><div class="line">q = r[<span class="string">'DailyAirQualityIndex'</span>][<span class="string">'LocalAuthority'</span>][<span class="string">'Site'</span>][<span class="string">'Species'</span>] <span class="comment"># This extracts the list from the JSON object</span></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> q:</div><div class="line">specie = key[<span class="string">'@SpeciesCode'</span>]</div><div class="line">species=&#123;<span class="string">'SpeciesCode'</span>: specie&#125;</div><div class="line">speciesCode.append(species)</div><div class="line"><span class="keyword">break</span></div><div class="line"></div><div class="line"><span class="keyword">except</span>:</div><div class="line">attempts += <span class="number">1</span></div><div class="line"><span class="keyword">print</span> <span class="string">"error finding speciesCode of sensors"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">return</span> speciesCode</div><div class="line"></div><div class="line"><span class="comment"># Finally once we have the sensors associated with the closest air quality sensor we can do a check of the last day and return an average of the readings</span></div><div class="line"><span class="comment"># I realise here it would be nice to check the current time and return it as a variable for input, will work on that on day 8</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sensorReadings</span><span class="params">()</span>:</span></div><div class="line">siteCode = distance()</div><div class="line">speciesCode = whatSensor()</div><div class="line">attempts = <span class="number">0</span> </div><div class="line">averageOut  = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> speciesCode:</div><div class="line">speciesUrl = key[<span class="string">'SpeciesCode'</span>]</div><div class="line">url = <span class="string">"http://api.erg.kcl.ac.uk/AirQuality/Data/SiteSpecies/SiteCode="</span>+siteCode+<span class="string">"/SpeciesCode="</span>+speciesUrl+<span class="string">"/StartDate=05-12-15/EndDate=06-12-15/Json"</span> <span class="comment"># Gives data in closest AQ monitor</span></div><div class="line">r = requests.get(url).json() <span class="comment"># Make a request to the LAQN API for data</span></div><div class="line"></div><div class="line">rLoop = r[<span class="string">'RawAQData'</span>][<span class="string">'Data'</span>]</div><div class="line">AQugm3 = [] </div><div class="line"></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> rLoop:</div><div class="line">AQugm3temp = key[<span class="string">'@Value'</span>] </div><div class="line"><span class="keyword">try</span>: </div><div class="line"> AQugm3temp = float(AQugm3temp) </div><div class="line"> AQugm3.append(AQugm3temp) <span class="comment"># Adds output to AQugm3 variable</span></div><div class="line"> <span class="comment"># Catches exceptions</span></div><div class="line"> <span class="keyword">except</span>:</div><div class="line"> <span class="keyword">print</span> <span class="string">'error in parsing, oops'</span></div><div class="line"> <span class="keyword">pass</span></div><div class="line"><span class="comment"># Really simple averages. Sums all elements in the list and divides by the length of the list </span></div><div class="line">average = sum(AQugm3) / float(len(AQugm3))</div><div class="line">average = round(average,<span class="number">2</span>)</div><div class="line">average=&#123;<span class="string">'SpeciesCode'</span>: speciesUrl, <span class="string">'average'</span>:average&#125;</div><div class="line">averageOut.append(average)</div><div class="line"></div><div class="line"><span class="keyword">return</span> averageOut</div><div class="line"></div><div class="line"><span class="keyword">print</span> sensorReadings()</div></pre></td></tr></table></figure><p>  On the code, apologies but the white spaces were not preserved when I copied it over, have a look at the github to get a more human readable version of the code.</p><p>  Running<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">python AQProject.py SW72bx</div></pre></td></tr></table></figure></p><p>Gives</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[&#123;"SpeciesCode": "NO2";, "average": 43.0&#125;, &#123;"SpeciesCode: 'PM10", 'average': 21.68&#125;, &#123;'SpeciesCode': "PM25", 'average': 8.66&#125;]</div></pre></td></tr></table></figure><p>Turns out the air quality around work is pretty good, for NO2 43ug/m3 average is right at the 40ug/m3 target for a yearly average. Yay 🙂</p><p>One thing I’ve noticed from this work is I need to have a play with times and dates to do it neatly. Tomorrow I’m going to play with NTP servers and the date module in python. Its a slight divergence from the API calling but will be a useful function to plug into other functions in the future.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;API purpose: Finding local air quality from address&lt;/p&gt;
&lt;p&gt;Signup: air quality has no signup google, as always, does.&lt;/p&gt;
&lt;p&gt;Documentatio
      
    
    </summary>
    
      <category term="Uncategorised" scheme="http://thebedlab.com/categories/Uncategorised/"/>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Day 6 API Month - GPS Distance</title>
    <link href="http://thebedlab.com/2015/12/06//2015/12/06/day-6-api-month-gps-distance//"/>
    <id>http://thebedlab.com/2015/12/06//2015/12/06/day-6-api-month-gps-distance//</id>
    <published>2015-12-06T22:42:58.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>API purpose: GPS Distance</p><p>Signup: Using the google developer portal</p><p>Documentation: <a href="https://developers.google.com/maps/web-services/client-library" target="_blank" rel="external">https://developers.google.com/maps/web-services/client-library</a></p><p>Github: <a href="https://github.com/gregario/API-Month/tree/master/Day6%20GPS%20Distance" target="_blank" rel="external">https://github.com/gregario/API-Month/tree/master/Day6%20GPS%20Distance</a></p><p>Comment: Continuation of day 4, interesting problem.</p><p>Quick one today after yesterday drove me mad. Wanted to do a quick function that takes in two sets of GPS data and works out the distance between them. I did some reading on calculating distances between two points on a map. Apparently its a real issue in the mapping community with many implementations of map hashing being discussed.</p><p>My first thoughts would be to take the two latitudes from each other, take the absolute of that. Then do the same with longditude and then add those two numbers together. In math-y terms it would be:</p><blockquote><p>distance = abs(lat2 - lat1) + abs(long2 - long2)</p></blockquote><p>But then I had a flashback to my school maths and it would be more appropriate to do a pythagoras job on it. Basically take the two points as a hypotenuse of a right angled triangle. Then I had the fun of programming it in python, I got:</p><blockquote><p>math.sqrt((p0[0] - p1[0])**2 + (p0[1] - p1[1])**2)</p></blockquote><p>A small aside but another thing I did for today was to make an API key file that I can use with all my programs. So commiting your API keys to Git is generally a bad thing. People have scripts running to search for API key, particularly for anything to do with AWS, and start hammering them once they’re found. It can end up costing a bunch of money. So I have a separate file I do not commit to any Git repository and I add to my files by importing it like any other module in python. It also is a nice system for configuration files if you want to make your python scripts more abstract.</p><p>So new code, here it it.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-T</span></div><div class="line"><span class="comment"># Program to check the linear distance between two sets of GPS coordinates. </span></div><div class="line"><span class="comment"># Continuation of day 4 of API Month</span></div><div class="line"><span class="comment"># Greg Jackson 6th deb 2015</span></div><div class="line"><span class="comment"># Twitter @gr3gario or github gregario</span></div><div class="line"><span class="comment"># Day 6 of the Month of API</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> googlemaps <span class="comment"># install using pip install -U googlemaps </span></div><div class="line"><span class="keyword">import</span> sys <span class="comment"># Used to take in input parameters from command line.</span></div><div class="line"><span class="keyword">from</span> APIKEY <span class="keyword">import</span> googlekey</div><div class="line"><span class="keyword">import</span> math <span class="comment"># Added to do sqrt </span></div><div class="line"></div><div class="line"><span class="comment"># Geocoding an address</span></div><div class="line">geocode_result = gmaps.geocode(sys.argv[<span class="number">1</span>]) <span class="comment"># passes address given on command line to google maps geocoding api</span></div><div class="line">gmaps = googlemaps.Client(key=[INSERT_KEY]googlekey) <span class="comment"># Get key from your google developer portal. </span></div><div class="line">latlng = []</div><div class="line">latlngTB = [<span class="number">51.5054564</span>,<span class="number">-0.0753565</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> geocode_result: <span class="comment"># the returned object is a list with nested JSON objects inside each list. So you need to iterate through the list and do operations on each object separately</span></div><div class="line">latlng.append(key[<span class="string">'geometry'</span>][<span class="string">'bounds'</span>][<span class="string">'northeast'</span>][<span class="string">'lat'</span>]) <span class="comment"># pulls out nested latitude figure from call</span></div><div class="line">latlng.append(key[<span class="string">'geometry'</span>][<span class="string">'bounds'</span>][<span class="string">'northeast'</span>][<span class="string">'lng'</span>]) <span class="comment"># pulls out nested longditude figure from call</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">distance</span><span class="params">(p0, p1)</span>:</span></div><div class="line">    <span class="keyword">return</span> math.sqrt((p0[<span class="number">0</span>] - p1[<span class="number">0</span>])**<span class="number">2</span> + (p0[<span class="number">1</span>] - p1[<span class="number">1</span>])**<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="comment"># Obsolete Method, simplier than other.</span></div><div class="line"><span class="comment">#distance = abs(latlngTB[0] - latlng[0]) + abs(latlng[1] - latlngTB[1]) </span></div><div class="line"></div><div class="line">distance = distance(latlng,latlngTB)</div><div class="line"><span class="keyword">print</span> <span class="string">"The distance to Tower Bridge is: "</span> +str(distance)</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;API purpose: GPS Distance&lt;/p&gt;
&lt;p&gt;Signup: Using the google developer portal&lt;/p&gt;
&lt;p&gt;Documentation: &lt;a href=&quot;https://developers.google.com/m
      
    
    </summary>
    
      <category term="Uncategorised" scheme="http://thebedlab.com/categories/Uncategorised/"/>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Day 5 API Month - London Air Quality</title>
    <link href="http://thebedlab.com/2015/12/05//2015/12/05/day-5-api-month-london-air-quality//"/>
    <id>http://thebedlab.com/2015/12/05//2015/12/05/day-5-api-month-london-air-quality//</id>
    <published>2015-12-05T16:48:47.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>API purpose: Getting London Air Quality Data</p><p>Signup: None, its open data</p><p>Documentation: <a href="http://api.erg.kcl.ac.uk/AirQuality/help" target="_blank" rel="external">http://api.erg.kcl.ac.uk/AirQuality/help</a></p><p>Github: <a href="https://github.com/gregario/API-Month/tree/master/Day5%20AirQuality" target="_blank" rel="external">https://github.com/gregario/API-Month/tree/master/Day5%20AirQuality</a></p><p>Comment: Really well made API, not real time though, about a day delay</p><p>So Kings College run an array of air quality monitors across London. Its a really interesting piece of data to work with that is so relevant to our day to day lives. Thought I would have a look at the API and try to pull the data from my nearest air quality monitor to my home.</p><p>The call from the API documentation requires the use of their site codes to work, which isn’t the most intuitive. A quick peruse of the maps at <a href="http://www.londonair.org.uk/LondonAir/Default.aspx" target="_blank" rel="external">particulate matter</a>. Cool so IS2 is my air quality roadside monitor. As a bonus there’s 15 years of data from the monitor.</p><p>So <a href="http://api.erg.kcl.ac.uk/AirQuality/help/operations/GetRawDataSitesSpeciesJSON" target="_blank" rel="external">here</a> is the link to the call we want. It actually leads to a pretty straightforward script. [Edit an hour later]. Getting strings converted to floats is apparently not straight forward. Anywho, here’s the completed script. As always I explain the crap out of the code in the code so I think it kind of explains itself!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#coding: utf-8</span></div><div class="line"><span class="comment"># Day 5 of month of API</span></div><div class="line"><span class="comment"># Looking at local air quality data and what the last 24 hours have been like in your local area</span></div><div class="line"><span class="comment"># Greg Jackson 05/12/15 gr3gario on twitter ang gregario on github</span></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json </div><div class="line"></div><div class="line"></div><div class="line">url = <span class="string">"http://api.erg.kcl.ac.uk/AirQuality/Data/SiteSpecies/SiteCode=IS2/SpeciesCode=NO2/StartDate=04-12-15/EndDate=05-12-15/Json"</span> <span class="comment"># Gives data in closest AQ monitor</span></div><div class="line">r = requests.get(url).json() <span class="comment"># Make a request to the LAQN API for data</span></div><div class="line"></div><div class="line">rLoop = r[<span class="string">'RawAQData'</span>][<span class="string">'Data'</span>] <span class="comment"># You got to define this here as you can't nest it below. the for loop below only works for the list embedded in the JSON object</span></div><div class="line">AQugm3 = [] <span class="comment"># A list to store the readins</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> rLoop:</div><div class="line">AQugm3temp = key[<span class="string">'@Value'</span>] <span class="comment"># This loops through each data packet in the list and pulls out our relevant datapoint</span></div><div class="line"><span class="keyword">try</span>: <span class="comment"># A try catch is included here as there are blank datapoints returned from the LAQN API that would mess this up occasionally if there wasn't a catch in place</span></div><div class="line">AQugm3temp = float(AQugm3temp) <span class="comment"># Converts from a string to a float so we can perform operations on it</span></div><div class="line">AQugm3.append(AQugm3temp) <span class="comment"># Adds output to AQugm3 variable</span></div><div class="line"><span class="comment"># Catches exceptions</span></div><div class="line"><span class="keyword">except</span>:</div><div class="line"><span class="keyword">print</span> <span class="string">'error in parsing, oops'</span></div><div class="line"><span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="comment"># Really simple averages. Sums all elements in the list and divides by the length of the list </span></div><div class="line">average = sum(AQugm3) / float(len(AQugm3))</div><div class="line">average = round(average,<span class="number">2</span>)</div><div class="line"><span class="comment"># This is an EU defined goal for NO2 in the city. I figure if our daily average is below this we're doing well. Its more to give context to the number.</span></div><div class="line">goal = <span class="number">40.0</span> </div><div class="line"></div><div class="line"><span class="comment"># Simple check to give context to the number. </span></div><div class="line"><span class="keyword">if</span> average &lt; goal:</div><div class="line"><span class="keyword">print</span> <span class="string">"Hurray! The air quality today is less than the yearly average target of 40 ug/m3 NO2 target in the UK and reads "</span> +str(average)+ <span class="string">" ug/m3"</span></div><div class="line"><span class="keyword">elif</span> average &gt; goal: </div><div class="line"><span class="keyword">print</span> <span class="string">"Unfortunately the air quality today is more than the yearly average target of 40 ug/m3 NO2 in the UK and reads "</span> + str(average)+ <span class="string">" ug/m3"</span></div></pre></td></tr></table></figure><p>So when I run python AQ.py.</p><blockquote><p>Unfortunately the air quality today is more than the yearly average target of 40 ug/m3 NO2 in the UK and reads 69.71 ug/m3</p></blockquote><p>Interesting stuff 🙂</p><p>So I had the thought of making a bigger project at the end of each week, not necessarily more work but wrapping up the work I’ve done into one bigger program. I have a good idea to wrap this weeks work up which I’ll explain on Monday but its missing one big element. I need to be able to easily calculate the distance between two sets of GPS coordinates. So tomorrow I’ll work on this. I’ll be pulling an address in the UK, converting to GPS data and checking its linear distance to tower bridge in London.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;API purpose: Getting London Air Quality Data&lt;/p&gt;
&lt;p&gt;Signup: None, its open data&lt;/p&gt;
&lt;p&gt;Documentation: &lt;a href=&quot;http://api.erg.kcl.ac.uk/A
      
    
    </summary>
    
      <category term="Uncategorised" scheme="http://thebedlab.com/categories/Uncategorised/"/>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>Day 4 API Month - Google Maps Geocoding</title>
    <link href="http://thebedlab.com/2015/12/04//2015/12/04/day-4-api-month-google-maps-geocoding//"/>
    <id>http://thebedlab.com/2015/12/04//2015/12/04/day-4-api-month-google-maps-geocoding//</id>
    <published>2015-12-04T18:05:13.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>API purpose: Getting GPS data (amongst a bunch of other things)</p><p>Signup: Via your google account.</p><p>Documentation: <a href="https://developers.google.com/maps/web-services/client-library" target="_blank" rel="external">https://developers.google.com/maps/web-services/client-library</a></p><p>Github:<a href="https://github.com/gregario/API-Month/tree/master/Day4%20GPS" target="_blank" rel="external"> https://github.com/gregario/API-Month/tree/master/Day4%20GPS</a></p><p>Comment: Easy Peasy!</p><p>A super simple one today. Working through these location maps I’ve had to input GPS coordinates for a call and I thought it would be nice to be able to feed in a nice address and get a nice GPS coordinates. Turns out google provide this service and its super easy to use.</p><p>So I looked at a function for geocoding (taking an address and converting to GPS), this can be simply altered for reverse geocoding too (taking GPS and converting to an address). The latter is important too as some functions in API’s return a GPS and its not meaningful as an output (or nobody knows what the hell it means.</p><p>So the code today is super simple as a nice man made a python wrapper for all of this. So rock over to <a href="https://github.com/googlemaps/google-maps-services-python" target="_blank" rel="external">https://github.com/googlemaps/google-maps-services-python</a> or just run:</p><blockquote><p>sudo pip install -U googlemaps</p></blockquote><p>You are basically good to go then. So I wrote two short scripts that are available on the github link above, the scripts are pretty easy and build on the python tricks I built up in the other tutorials.</p><p><a href="/wp-content/uploads/2015/12/JSON_Day4.jpg">JSON_Day4</a></p><p>Here’s the API call, very similar structure to the TFL structure!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Program to check how long it will take me to get to work</span></div><div class="line"><span class="comment"># Greg Jackson 4th deb 2015</span></div><div class="line"><span class="comment"># Twitter @gr3gario or github gregario</span></div><div class="line"><span class="comment"># Day four of the Month of API</span></div><div class="line"></div><div class="line">import googlemaps <span class="comment"># install using pip install -U googlemaps </span></div><div class="line">import sys <span class="comment"># Used to take in input parameters from command line.</span></div><div class="line"></div><div class="line">gmaps = googlemaps.Client(key=<span class="string">'INSERT API KEY'</span>) <span class="comment"># Get key from your google developer portal. </span></div><div class="line"></div><div class="line"><span class="comment"># Geocoding an address</span></div><div class="line">geocode_result = gmaps.geocode(sys.argv[1]) <span class="comment"># passes address given on command line to google maps geocoding api</span></div><div class="line">latlng = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> geocode_result: <span class="comment"># the returned object is a list with nested JSON objects inside each list. So you need to iterate through the list and do operations on each object separately</span></div><div class="line">latlng.append(key[<span class="string">'geometry'</span>][<span class="string">'bounds'</span>][<span class="string">'northeast'</span>][<span class="string">'lat'</span>]) <span class="comment"># pulls out nested latitude figure from call</span></div><div class="line">latlng.append(key[<span class="string">'geometry'</span>][<span class="string">'bounds'</span>][<span class="string">'northeast'</span>][<span class="string">'lng'</span>]) <span class="comment"># pulls out nested longditude figure from call</span></div><div class="line"></div><div class="line"><span class="comment"># easy peasy printing</span></div><div class="line"><span class="built_in">print</span> <span class="string">"Your latitude is: "</span> +latlng[0]</div><div class="line"><span class="built_in">print</span> <span class="string">"Your londitude is: "</span> +latlng[1]</div></pre></td></tr></table></figure><p>And it works! Go me.</p><p><a href="/wp-content/uploads/2015/12/day4-success.jpg">day4 success</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;API purpose: Getting GPS data (amongst a bunch of other things)&lt;/p&gt;
&lt;p&gt;Signup: Via your google account.&lt;/p&gt;
&lt;p&gt;Documentation: &lt;a href=&quot;ht
      
    
    </summary>
    
      <category term="Uncategorised" scheme="http://thebedlab.com/categories/Uncategorised/"/>
    
    
  </entry>
  
  <entry>
    <title>API Month Day 3 - TFL API</title>
    <link href="http://thebedlab.com/2015/12/04//2015/12/04/api-month-day-3-tfl-api//"/>
    <id>http://thebedlab.com/2015/12/04//2015/12/04/api-month-day-3-tfl-api//</id>
    <published>2015-12-04T17:00:33.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>API purpose: Commuting Data</p><p>Signup: No Signup</p><p>Documentation: <a href="https://api-portal.tfl.gov.uk/docs" target="_blank" rel="external">https://api-portal.tfl.gov.uk/docs</a></p><p>Github: <a href="https://github.com/gregario/API-Month/tree/master/Day3%20Maps" target="_blank" rel="external">https://github.com/gregario/API-Month/tree/master/Day3%20Maps </a> Comment: surprisingly challenging</p><p>So as I said yesterday today I want to find the arrival time of my local train so I can plan my morning breakfast intake! It turned out to be quite challenging… Firstly a comment on the TFL (transport for london) API services. They’re all over the place. I found the following resources to extract data about journeys, stop locations and times:</p><p><a href="https://api.tfl.gov.uk/#Journey" target="_blank" rel="external">https://api.tfl.gov.uk/#Journey</a></p><p><a href="http://countdown.tfl.gov.uk/" target="_blank" rel="external">http://countdown.tfl.gov.uk/</a></p><p>and two sets of documentation at:</p><p><a href="https://api-portal.tfl.gov.uk/docs" target="_blank" rel="external">https://api-portal.tfl.gov.uk/docs</a></p><p><a href="https://api.tfl.gov.uk/" target="_blank" rel="external">https://api.tfl.gov.uk/</a></p><p>So I eventually used the API portal to get access to arrival times, it wasn’t the most straightforward information set to work with however. Check out the photo!</p><p><a href="/wp-content/uploads/2015/12/JSON_TFL.jpg">JSON_TFL</a></p><p>The photo shows a typical API response from a station arrival time call. We want one variable from this giant list! This is a good time to work with a list like this as many API’s are complex like this one so it gives me an opportunity to go through the detail and figure out how to extract the data.</p><p>I got to play with some good stuff here such as operating on, iterating over and extracting conditional data from JSON objects. Also doing operations on time while pulling the current real time from the python datetime module.</p><p>The key for the code here is that the API is a list where each element in the list is a JSON object (that we manipulate as a python dict). Confused? I was… But its OK to work with in practice. What happens here is we write some code to loop through the list and for every JSON element in the list do a value search for arrival time. This gives us the arrival time of all trains into my station. However I only want certain trains heading in one direction. So I run an if with the loop checking for the relevant trains. If they are present pop the arrival time from that train into a new array. Then we have an array with all the relevant arrival times. Just sort that and you have the train that will arrive first. Pop that out and you have a variable to work with. YAY. Taking that from the current time gives you the number you are looking for.</p><p>I’ve explained the logic of what I want to do now let’s look at the code. If you are reading this (I do doubt anyone is) I am trying to improve the way in which I write these tutorials. Today I’m trying to explain how all the code works as comments. Hopefully one can understand how it works just from that.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Program to check how long it will take me to get to work</span></div><div class="line"><span class="comment"># Greg Jackson 1st dev 2015</span></div><div class="line"><span class="comment"># Twitter @gr3gario or github gregario</span></div><div class="line"><span class="comment"># Day one of the Month of API</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json </div><div class="line"><span class="keyword">import</span> sys <span class="comment"># needed to pass arguments from command line </span></div><div class="line"><span class="keyword">import</span> datetime </div><div class="line"></div><div class="line">url = <span class="string">"https://api.tfl.gov.uk/StopPoint/910grctryrd/arrivals"</span> <span class="comment"># the stop number is returned from the TFL website from a manual search. This calls the data</span></div><div class="line">r = requests.get(url).json() <span class="comment"># Make a request to the TFL API for data</span></div><div class="line">time = [] <span class="comment"># List for my future train arrivals</span></div><div class="line"><span class="keyword">for</span> key <span class="keyword">in</span> r: <span class="comment"># the returned object is a list with nested JSON objects inside each list. So you need to iterate through the list and do operations on each object separately</span></div><div class="line"><span class="keyword">if</span> key[<span class="string">'destinationName'</span>] == (<span class="string">"Cheshunt Rail Station"</span>) <span class="keyword">or</span> (<span class="string">"Enfield Town Rail Station"</span>): <span class="comment"># This filters out trains to different destinations. I can take either of these trains</span></div><div class="line">time.append(key[<span class="string">'expectedArrival'</span>])  <span class="comment"># Adds expected arrival time from each train data structure to the time list</span></div><div class="line"></div><div class="line">time_sorted = sorted(time) <span class="comment"># sorts the time list so we get the train due to arrive first</span></div><div class="line">time_train = time_sorted.pop(<span class="number">0</span>) <span class="comment"># pops out the first train to arrive and stores as a string</span></div><div class="line">§</div><div class="line"></div><div class="line"><span class="comment"># this translates the time from a string in the list to a usable string, taking out the date. </span></div><div class="line"><span class="comment"># A note on how I deal with the date and time operations here. </span></div><div class="line"><span class="comment"># Its TERRIBLE. it works but I'm sure there's a much cleaner way of doing this. </span></div><div class="line">time_train_temp = time_train.split(<span class="string">'T'</span>,<span class="number">1</span>)[<span class="number">-1</span>]</div><div class="line">time_train_parsed = time_train_temp.split(<span class="string">'.'</span>,<span class="number">1</span>)[<span class="number">0</span>]</div><div class="line"></div><div class="line">current_time = str(datetime.datetime.now())</div><div class="line">current_time_temp = current_time.split(<span class="string">' '</span>,<span class="number">1</span>)[<span class="number">-1</span>]</div><div class="line">current_time_parsed = current_time_temp.split(<span class="string">'.'</span>,<span class="number">1</span>)[<span class="number">0</span>]</div><div class="line"><span class="comment">#print  k</span></div><div class="line"></div><div class="line"><span class="comment"># Converts the two hour:minute:second strings back into time variables. </span></div><div class="line">timeA = datetime.datetime.strptime(time_train_parsed, <span class="string">'%H:%M:%S'</span>)  </div><div class="line">timeB = datetime.datetime.strptime(current_time_parsed, <span class="string">'%H:%M:%S'</span>) </div><div class="line"></div><div class="line"><span class="comment"># Takes the time of the next train away from the current time to give an estimated time until arrival of the next train I can take </span></div><div class="line">time_delta = timeA-timeB</div><div class="line"><span class="keyword">print</span> (<span class="string">"The next train to work will arrive in "</span> +str(time_delta))</div></pre></td></tr></table></figure><p>And it works!</p><p><a href="/wp-content/uploads/2015/12/Output_day3.jpg">Output_day3</a></p><p>I’ve never been so happy to see some command line arguments! This was day three but I ran over time so I’m going to immediately do day 4 too 🙂 Stay tuned.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;API purpose: Commuting Data&lt;/p&gt;
&lt;p&gt;Signup: No Signup&lt;/p&gt;
&lt;p&gt;Documentation: &lt;a href=&quot;https://api-portal.tfl.gov.uk/docs&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="Uncategorised" scheme="http://thebedlab.com/categories/Uncategorised/"/>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>API Month Day 2 - Weather Underground</title>
    <link href="http://thebedlab.com/2015/12/02//2015/12/02/api-month-day-2-weather-underground//"/>
    <id>http://thebedlab.com/2015/12/02//2015/12/02/api-month-day-2-weather-underground//</id>
    <published>2015-12-02T16:24:23.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Highlights</strong></p><p><strong>API purpose:</strong> Weather Conditions</p><p><strong>Signup: </strong><a href="http://www.wunderground.com/weather/api/" target="_blank" rel="external">http://www.wunderground.com/weather/api/</a></p><p><strong>Documentation:</strong> <a href="http://www.wunderground.com/weather/api/d/docs" target="_blank" rel="external">http://www.wunderground.com/weather/api/d/docs</a><br><strong>Github:</strong> <a href="http://bit.ly/1OxwFrc" target="_blank" rel="external">http://bit.ly/1OxwFrc</a></p><blockquote><p><strong>Comment:</strong> Feature rich and worldwide weather!</p></blockquote><p>OK so day two of API month. Exciting, right? Yesterday it occured to me if I’m making a decision when debating my cycle vs tube debate it would also be good to see the near term forecast. So I did some reading and found weather underground. Its a system of weather stations around the world, with data provided by official and hobbyist sources. Their API is pretty good too!</p><p><strong>Getting the Data</strong></p><p>So I swung over and setup an account. Straight forward process. I want to pull relevant information from the API so I did a sample call for London to see what I would get.</p><blockquote><p><a href="http://api.wunderground.com/api/[INSERTKEY]/conditions/q/uk/London.json" target="_blank" rel="external">http://api.wunderground.com/api/[INSERTKEY]/conditions/q/uk/London.json</a></p></blockquote><p>Pretty straightforward. A slightly different system than citymapper but very usable. It returned this: ``</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"response"</span>: &#123;</div><div class="line">      <span class="attr">"version"</span>:<span class="string">"0.1"</span>,</div><div class="line">      <span class="attr">"termsofService"</span>:<span class="string">"http://www.wunderground.com/weather/api/d/terms.html"</span>,</div><div class="line">      <span class="attr">"features"</span>: &#123;</div><div class="line">        <span class="attr">"conditions"</span>: <span class="number">1</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  , <span class="attr">"current_observation"</span>: &#123;</div><div class="line">        <span class="attr">"image"</span>: &#123;</div><div class="line">        <span class="attr">"url"</span>:<span class="string">"http://icons.wxug.com/graphics/wu2/logo_130x80.png"</span>,</div><div class="line">        <span class="attr">"title"</span>:<span class="string">"Weather Underground"</span>,</div><div class="line">        <span class="attr">"link"</span>:<span class="string">"http://www.wunderground.com"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"display_location"</span>: &#123;</div><div class="line">        <span class="attr">"full"</span>:<span class="string">"Dublin, Ireland"</span>,</div><div class="line">        <span class="attr">"city"</span>:<span class="string">"Dublin"</span>,</div><div class="line">        <span class="attr">"state"</span>:<span class="string">""</span>,</div><div class="line">        <span class="attr">"state_name"</span>:<span class="string">"Ireland"</span>,</div><div class="line">        <span class="attr">"country"</span>:<span class="string">"IE"</span>,</div><div class="line">        <span class="attr">"country_iso3166"</span>:<span class="string">"IE"</span>,</div><div class="line">        <span class="attr">"zip"</span>:<span class="string">"00000"</span>,</div><div class="line">        <span class="attr">"magic"</span>:<span class="string">"1"</span>,</div><div class="line">        <span class="attr">"wmo"</span>:<span class="string">"03969"</span>,</div><div class="line">        <span class="attr">"latitude"</span>:<span class="string">"53.43000031"</span>,</div><div class="line">        <span class="attr">"longitude"</span>:<span class="string">"-6.25000000"</span>,</div><div class="line">        <span class="attr">"elevation"</span>:<span class="string">"85.00000000"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"observation_location"</span>: &#123;</div><div class="line">        <span class="attr">"full"</span>:<span class="string">"Paulie - Swords West, Swords, DUBLIN"</span>,</div><div class="line">        <span class="attr">"city"</span>:<span class="string">"Paulie - Swords West, Swords"</span>,</div><div class="line">        <span class="attr">"state"</span>:<span class="string">"DUBLIN"</span>,</div><div class="line">        <span class="attr">"country"</span>:<span class="string">"IRELAND"</span>,</div><div class="line">        <span class="attr">"country_iso3166"</span>:<span class="string">"IE"</span>,</div><div class="line">        <span class="attr">"latitude"</span>:<span class="string">"53.463554"</span>,</div><div class="line">        <span class="attr">"longitude"</span>:<span class="string">"-6.249463"</span>,</div><div class="line">        <span class="attr">"elevation"</span>:<span class="string">"138 ft"</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"estimated"</span>: &#123;</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">"station_id"</span>:<span class="string">"IDUBLINS3"</span>,</div><div class="line">        <span class="attr">"observation_time"</span>:<span class="string">"Last Updated on December 2, 4:08 PM GMT"</span>,</div><div class="line">        <span class="attr">"observation_time_rfc822"</span>:<span class="string">"Wed, 02 Dec 2015 16:08:49 +0000"</span>,</div><div class="line">        <span class="attr">"observation_epoch"</span>:<span class="string">"1449072529"</span>,</div><div class="line">        <span class="attr">"local_time_rfc822"</span>:<span class="string">"Wed, 02 Dec 2015 16:09:02 +0000"</span>,</div><div class="line">        <span class="attr">"local_epoch"</span>:<span class="string">"1449072542"</span>,</div><div class="line">        <span class="attr">"local_tz_short"</span>:<span class="string">"GMT"</span>,</div><div class="line">        <span class="attr">"local_tz_long"</span>:<span class="string">"Europe/Dublin"</span>,</div><div class="line">        <span class="attr">"local_tz_offset"</span>:<span class="string">"+0000"</span>,</div><div class="line">        <span class="attr">"weather"</span>:<span class="string">"Mostly Cloudy"</span>,</div><div class="line">        <span class="attr">"temperature_string"</span>:<span class="string">"51.1 F (10.6 C)"</span>,</div><div class="line">        <span class="attr">"temp_f"</span>:<span class="number">51.1</span>,</div><div class="line">        <span class="attr">"temp_c"</span>:<span class="number">10.6</span>,</div><div class="line">        <span class="attr">"relative_humidity"</span>:<span class="string">"99%"</span>,</div><div class="line">        <span class="attr">"wind_string"</span>:<span class="string">"Calm"</span>,</div><div class="line">        <span class="attr">"wind_dir"</span>:<span class="string">"SW"</span>,</div><div class="line">        <span class="attr">"wind_degrees"</span>:<span class="number">217</span>,</div><div class="line">        <span class="attr">"wind_mph"</span>:<span class="number">0.0</span>,</div><div class="line">        <span class="attr">"wind_gust_mph"</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">"wind_kph"</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">"wind_gust_kph"</span>:<span class="number">0</span>,</div><div class="line">        <span class="attr">"pressure_mb"</span>:<span class="string">"1017"</span>,</div><div class="line">        <span class="attr">"pressure_in"</span>:<span class="string">"30.04"</span>,</div><div class="line">        <span class="attr">"pressure_trend"</span>:<span class="string">"+"</span>,</div><div class="line">        <span class="attr">"dewpoint_string"</span>:<span class="string">"51 F (11 C)"</span>,</div><div class="line">        <span class="attr">"dewpoint_f"</span>:<span class="number">51</span>,</div><div class="line">        <span class="attr">"dewpoint_c"</span>:<span class="number">11</span>,</div><div class="line">        <span class="attr">"heat_index_string"</span>:<span class="string">"NA"</span>,</div><div class="line">        <span class="attr">"heat_index_f"</span>:<span class="string">"NA"</span>,</div><div class="line">        <span class="attr">"heat_index_c"</span>:<span class="string">"NA"</span>,</div><div class="line">        <span class="attr">"windchill_string"</span>:<span class="string">"NA"</span>,</div><div class="line">        <span class="attr">"windchill_f"</span>:<span class="string">"NA"</span>,</div><div class="line">        <span class="attr">"windchill_c"</span>:<span class="string">"NA"</span>,</div><div class="line">        <span class="attr">"feelslike_string"</span>:<span class="string">"51.1 F (10.6 C)"</span>,</div><div class="line">        <span class="attr">"feelslike_f"</span>:<span class="string">"51.1"</span>,</div><div class="line">        <span class="attr">"feelslike_c"</span>:<span class="string">"10.6"</span>,</div><div class="line">        <span class="attr">"visibility_mi"</span>:<span class="string">"6.2"</span>,</div><div class="line">        <span class="attr">"visibility_km"</span>:<span class="string">"10.0"</span>,</div><div class="line">        <span class="attr">"solarradiation"</span>:<span class="string">"0"</span>,</div><div class="line">        <span class="attr">"UV"</span>:<span class="string">"0.0"</span>,<span class="attr">"precip_1hr_string"</span>:<span class="string">"0.00 in ( 0 mm)"</span>,</div><div class="line">        <span class="attr">"precip_1hr_in"</span>:<span class="string">"0.00"</span>,</div><div class="line">        <span class="attr">"precip_1hr_metric"</span>:<span class="string">" 0"</span>,</div><div class="line">        <span class="attr">"precip_today_string"</span>:<span class="string">"0.07 in (2 mm)"</span>,</div><div class="line">        <span class="attr">"precip_today_in"</span>:<span class="string">"0.07"</span>,</div><div class="line">        <span class="attr">"precip_today_metric"</span>:<span class="string">"2"</span>,</div><div class="line">        <span class="attr">"icon"</span>:<span class="string">"mostlycloudy"</span>,</div><div class="line">        <span class="attr">"icon_url"</span>:<span class="string">"http://icons.wxug.com/i/c/k/mostlycloudy.gif"</span>,</div><div class="line">        <span class="attr">"forecast_url"</span>:<span class="string">"http://www.wunderground.com/global/stations/03969.html"</span>,</div><div class="line">        <span class="attr">"history_url"</span>:<span class="string">"http://www.wunderground.com/weatherstation/WXDailyHistory.asp?ID=IDUBLINS3"</span>,</div><div class="line">        <span class="attr">"ob_url"</span>:<span class="string">"http://www.wunderground.com/cgi-bin/findweather/getForecast?query=53.463554,-6.249463"</span>,</div><div class="line">        <span class="attr">"nowcast"</span>:<span class="string">""</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Wow… That is a lot more info than our last tutorial. This is great though, it gives me a chance to play with more information. Here’s what I wrote up.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Program to check how long it will take me to get to work</span></div><div class="line"><span class="comment"># Greg Jackson 1st dev 2015</span></div><div class="line"><span class="comment"># Twitter @gr3gario or github gregario</span></div><div class="line"><span class="comment"># Day one of the Month of API</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json </div><div class="line"><span class="keyword">import</span> sys <span class="comment"># needed to pass arguments from command line </span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">country=  str(sys.argv[<span class="number">1</span>])</div><div class="line">location = str(sys.argv[<span class="number">2</span>])</div><div class="line">url = <span class="string">"http://api.wunderground.com/api/[INSERTAPIKEY]/conditions/q/"</span>+str(country)+<span class="string">"/"</span>+str(location)+<span class="string">".json"</span></div><div class="line"></div><div class="line">r = requests.get(url).json()</div><div class="line">print(<span class="string">"The current wind speed (mph) is: "</span>+ str(r[<span class="string">'current_observation'</span>][<span class="string">'wind_mph'</span>]))</div><div class="line">print(<span class="string">"The current temperature (C) is: "</span> +str(r[<span class="string">'current_observation'</span>][<span class="string">'temp_c'</span>]))</div><div class="line">print(<span class="string">"Sure what's the weather like? : "</span>+ str(r[<span class="string">'current_observation'</span>][<span class="string">'icon'</span>]))</div><div class="line">print(<span class="string">"The current relative RH is: "</span>+str(r[<span class="string">'current_observation'</span>][<span class="string">'relative_humidity'</span>]))</div><div class="line">print(<span class="string">"Will it rain soon? : "</span>+str(r[<span class="string">'current_observation'</span>][<span class="string">'precip_1hr_metric'</span>]))</div><div class="line"></div><div class="line"><span class="comment"># So I have a good indication of the weather from a current loation. </span></div><div class="line"><span class="comment"># I introduced two super simple things here. </span></div><div class="line"><span class="comment"># One is string concatonation in python. This lets us declare a location by variable instead of in line. </span></div><div class="line"><span class="comment"># this can be better than the payload option as it gives you more flexibility. </span></div><div class="line"></div><div class="line"><span class="comment">## Finally I thought I could declare from the command line the location to search. </span></div><div class="line"><span class="comment">## I've always wondered how this could be done so now I know!</span></div></pre></td></tr></table></figure><p>Still pretty straightforward too!</p><p><strong>Nested JSON</strong></p><p>Yesterday our JSON was super easy. It was one series of machine tag pairs inside a JSON object. We asked for our machine tag (estimated_time) in that array and we were good to go with the value associated with that. However in JSON, each variable in an array can have an array of machine tags nested inside it. Its actually quite elegant if you work through the logic but we don’t care about this, we just want the data, right?!!! So let’s take wind speed from above. We wanted to get the current_observation array and inside that get the wind_mph tag and its associated value. To do this we used the following syntax.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">print(<span class="string">"The current wind speed (mph) is: "</span>+ str(r\[<span class="string">'current\_observation'</span>\]\[<span class="string">'wind\_mph'</span>\]))</div></pre></td></tr></table></figure><p><strong>So What Next? </strong></p><p>So that’s that for today. Another simple example with some useful tricks to get you going with weather APIs. So what shall I do tomorrow??? I like this work around my commute to work. I think I’m going to solve a final challenge tomorrow with a good one, I live a 4 minute walk from my local train to work. The train comes every 15 minutes. The arrival time of the next train dictates if I have breakfast each day. I check this every day on google maps so I want to write a script that checks the TFL API and displays the next train time for me so I can quickly glance and see how long I have!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Highlights&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;API purpose:&lt;/strong&gt; Weather Conditions&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Signup: &lt;/strong&gt;&lt;a href=&quot;http://www.w
      
    
    </summary>
    
      <category term="Uncategorised" scheme="http://thebedlab.com/categories/Uncategorised/"/>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>API Month Day 1 - Citymapper</title>
    <link href="http://thebedlab.com/2015/12/01//2015/12/01/api-month-day-1-citymapper//"/>
    <id>http://thebedlab.com/2015/12/01//2015/12/01/api-month-day-1-citymapper//</id>
    <published>2015-12-01T17:08:47.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>So day one has arrived, if you are curious as to what I’m talking about have a look here. So I have to decide every day if I am going to cycle to work or take my local train. Lots of info helps me make this decision.</p><p>How long will the train take?</p><p>Will it rain?</p><p>How hungover am I?</p><p>Now API’s can’t help with the last one (although google now is getting pretty close to being able to guess) but it can help with the first two. To start today I thought I would start with a really simple one, how long will it take to get to work by train?</p><p>This can very variable. I have to change from train to tube and then change tube too to get to work. It’s a pain. So hence why I check. So I wrote this simple program, Train.py, to check to see my estimated commuting time to work. As my bike commute is a pretty predictable 44-48 minutes i can then make a decision.</p><p>This is a simple piece of code but I’ll describe what you need to use an API and the practicalities around using it in python and manipulating its output.</p><p>Lets start with the Citymapper API itself. It’s very straightforward:</p><ul><li><p>Head <a href="https://content.citymapper.com/i/897/citymapper-for-developers" target="_blank" rel="external">here</a> to register for an account and an API key.</p></li><li><p>Head <a href="https://citymapper.3scale.net/docs" target="_blank" rel="external">here</a> to check out the API documentation.</p></li></ul><p>You can use the documentation page to do a sample push and get an idea of the form of a request. I use a chrome extension called postman to check my calls and responses to make sure I have everything right before I start programming. So as an example to check the API to see travel time between two points you would call:</p><blockquote><p><a href="https://developer.citymapper.com/api/1/traveltime/?startcoord=51.2688199%2C-0.1783686&amp;endcoord=51.560117%2C-0.0722408&amp;time_type=arrival&amp;key=[INSERT" target="_blank" rel="external">https://developer.citymapper.com/api/1/traveltime/?startcoord=51.2688199%2C-0.1783686&amp;endcoord=51.560117%2C-0.0722408&amp;time_type=arrival&amp;key=[INSERT</a> KEY]</p></blockquote><p>So its pretty human readable, to go through it, you are checking the Citymapper mapper API server for a travel time. Then after the ? you can specify a list of parameters, the order doesn’t matter but there are required inputs. You can see above I specify start location, end location, arrival time and my key.</p><p>I obviously haven’t included my own key but if you were to put your own key there and put that whole message into POSTMAN or your browser you would see the following response.</p><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="attr">"travel_time_minutes"</span>: <span class="number">54</span>, <span class="attr">"diagnostic"</span>: &#123;<span class="attr">"milliseconds"</span>: <span class="number">2907</span>&#125; &#125;</div></pre></td></tr></table></figure><p>Again this is in a lovely human readable JSON (Just Simple Ordinary Notation) format. If we were to do some JSON parsing we could pull out the ‘54’ minutes variable and we’d have our answer.</p><p>So how do I program this? I use python for all my programming needs so I’ll discuss this now. The requests library is your friend so if you don’t have it installed pop  over to your favourite terminal window and run:</p><blockquote><p>sudo easy_install requests</p></blockquote><p>Once that is installed, you can run the following python program to print out on the command line what we just ran in a browser window.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="comment"># Program to check how long it will take me to get to work</span></div><div class="line"><span class="comment"># Greg Jackson 1st dev 2015</span></div><div class="line"><span class="comment"># Twitter @gr3gario or github gregario</span></div><div class="line"><span class="comment"># Day one of the Month of API</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> requests</div><div class="line"><span class="keyword">import</span> json </div><div class="line"></div><div class="line">url = <span class="string">"https://developer.citymapper.com/api/1/traveltime/"</span></div><div class="line">payload = &#123;<span class="string">'startcoord'</span>: <span class="string">'51.4618199,-0.1793686'</span>, <span class="string">'endcoord'</span>: <span class="string">'51.560117,-0.0722408'</span>,<span class="string">'time_type'</span>:<span class="string">'arrival'</span>,<span class="string">'key'</span>:<span class="string">'INSERTKEY'</span>&#125;</div><div class="line">r = requests.get(url, params=payload).json()</div></pre></td></tr></table></figure><p>Output looks like this:</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; "travel_time_minutes: 54, "diagnostic": &#123; "milliseconds": 2907&#125; &#125;</div></pre></td></tr></table></figure><p>Look familiar? Yes? Great. If you use the following code you will just return 54.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">r = requests.get(<span class="string">"https://developer.citymapper.com/api/1/traveltime/?startcoord=51.2188199%2C-0.1013686&amp;endcoord=51.560117%2C-0.0722408&amp;time_type=arrival&amp;key=[INSERTKEYHERE]"</span>).json()</div><div class="line"></div><div class="line">print(r[<span class="string">'travel_time_minutes'</span>])</div></pre></td></tr></table></figure><p>There you go. If you want to play with JSON more have a look at this tutorial <a href="http://docs.python-guide.org/en/latest/scenarios/json/" target="_blank" rel="external">here</a>. I found it super helpful. Finally I want to make this a little more user friendly by including the payload as a separate variable. This way you can make changes easily or include this as a function in a larger program or load the start/end coordinates from a file.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">url = &amp;<span class="comment">#8220;https://developer.citymapper.com/api/1/traveltime/&amp;#8221;</span></div><div class="line">  </div><div class="line">payload = &#123;<span class="string">'startcoord'</span>: <span class="string">'51.4618199,-0.1793686'</span>, <span class="string">'endcoord'</span>: <span class="string">'51.560117,-0.0722408&amp;#8242;,'</span>time_type<span class="string">':'</span>arrival<span class="string">','</span>key<span class="string">':'</span>INSERTKEYHERE<span class="string">'&#125;</span></div><div class="line"><span class="string">  </span></div><div class="line"><span class="string">r = requests.get(url, params=payload).json()</span></div><div class="line"><span class="string">  </span></div><div class="line"><span class="string">print(r['</span>travel_time_minutes<span class="string">'])</span></div></pre></td></tr></table></figure></p><p>So that’s me, day one was pretty simple but this is a learning experience for me. I haven’t played with a lot of these simple programming methods before so I’m learning as I go. My code is up on Github <a href="https://github.com/gregario/API-Month/tree/master/Day%201%20-%20Time%20to%20train" target="_blank" rel="external">here</a> if you want to play.</p><p>I got curious to see how much this commuting time varied over the course of a day. So I wrote another program TrainLoop.py that ran forever, checking once every 90 seconds and piping out a file that I can plot tomorrow. Why 90 seconds you ask? There’s a 1000 call limit per day on the free API for Citymapper. 24 hours / 1000 is a API call every 86 seconds.</p><p>Tomorrow I’ll look at a weather service to find out will it rain and if it will rain during the day. Could be useful for a comparison. Should be fun 🙂</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So day one has arrived, if you are curious as to what I’m talking about have a look here. So I have to decide every day if I am going to 
      
    
    </summary>
    
      <category term="Uncategorised" scheme="http://thebedlab.com/categories/Uncategorised/"/>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
  </entry>
  
  <entry>
    <title>API Month</title>
    <link href="http://thebedlab.com/2015/11/30//2015/11/30/api-month//"/>
    <id>http://thebedlab.com/2015/11/30//2015/11/30/api-month//</id>
    <published>2015-11-30T12:08:37.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>I do a lot of tinkering with API’s for work. They make operating with other people’s systems super simple and for IoT, an open API is often touted as an easy way for third parties to use your data for monitization purposes, like Intel’s Mashery, or as a public service with TFL (transport for London).</p><p><strong>I just threw out a lot of acronyms so very quickly, what are API’s?</strong></p><p>Application Programming Interfaces are a way of accessing or controlling a third party system with a well documented set of commands. A good programmer builds in such capabilities into their product so it can be used easily by others wanting to implement/build upon their work. A good example of this is Google Maps API was used to build Citymapper, a fantastic mapping service that is now in dozens of cities around the world.  It takes google’s data and mushes it together (the technical term would be data fusion but I prefer &#8220;mushes together&#8221;) with other local data sources for traffic/transport/weather to make a better mapping service.</p><p><strong>And what is IoT?</strong></p><p>IoT is the Internet of Things, its so hot right now… Simply, its about making dumb objects smart. Fridge becomes Smart Fridge. To become smart it needs to sense its environment in order to make its own decisions. Sensing the environment creates a bunch of data about said environment. API’s let you easily access said data.</p><p>Anywho, I just thought that it would be a cool idea to have an API month. Every day I will create a simple app to do something using an API at its core. It will definitely be simple and most probably be written in python. It may have a physical implementation depending on how busy I am but it will definitely pull some data from a service for some silly/informative/instructional purpose.</p><p>Tomorrow will be day one. I’m going to start with an easy one. I decide each morning if I should cycle or take the train to work in London. The train is super variable every as I have to go train to tube to another tube to get to work. If any of them are down or have delays its takes forever. So I thought I could write a script that automatically check to see how long my commute will be.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;I do a lot of tinkering with API’s for work. They make operating with other people’s systems super simple and for IoT, an open API is oft
      
    
    </summary>
    
      <category term="Projects" scheme="http://thebedlab.com/categories/Projects/"/>
    
    
      <category term="API" scheme="http://thebedlab.com/tags/API/"/>
    
      <category term="IoT" scheme="http://thebedlab.com/tags/IoT/"/>
    
  </entry>
  
  <entry>
    <title>Global Datafest Winners</title>
    <link href="http://thebedlab.com/2015/05/15//2015/05/15/global-datafest-winners//"/>
    <id>http://thebedlab.com/2015/05/15//2015/05/15/global-datafest-winners//</id>
    <published>2015-05-15T21:24:03.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p style="text-align: center;"><br>  We are delighted and proud to be part of the <a href="https://twitter.com/DatafestNet/status/599313618648190976" target="_blank" rel="external">Social Cycle</a>. o/<br></p><p style="text-align: center;"><br>  Congratulations to all the winners and thank you to all the <a href="http://www.global.datafest.net/about/judges" target="_blank" rel="external">fellow participants</a>  for an unforgettable hackathon.<br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-align: center;&quot;&gt;&lt;br&gt;  We are delighted and proud to be part of the &lt;a href=&quot;https://twitter.com/DatafestNet/status/5993136186
      
    
    </summary>
    
      <category term="Projects" scheme="http://thebedlab.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>Hour of code</title>
    <link href="http://thebedlab.com/2014/12/16//2014/12/16/hour-of-code//"/>
    <id>http://thebedlab.com/2014/12/16//2014/12/16/hour-of-code//</id>
    <published>2014-12-16T13:48:25.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>The <a href="https://scratched.gse.harvard.edu/hoc/" target="_blank" rel="external">Gaelscoil Thulach na nÓg</a> were a great success last week. Students and facilitators alike had great fun. Students learnt and taught each other a great deal about coding and produced wonderful festive greeting cards.</p><p>Originally the plan by <span style="font-size: medium;">Pól,  Bernie and Fiona - the session facilitators  - was to introduce the students to coding via the <a href="http://www.raspberrypi.org/test-tims-nuscratch-beta/" target="_blank" rel="external">Scratch</a>.</span></p><p>Some of the inspiring creations exhibited included: Santa bouncing on a trampoline - presents flying out of his sack - as he bid the viewer &#8220;Ho! Ho! Ho! Merry Christmas&#8221;, Ice skating reindeer and Dublin City sleigh rides.</p><p>Hopefully we will be back gain soon to build on those sessions, maybe adding <span style="font-size: medium;"><a href="http://www.raspberrypi.org/test-tims-nuscratch-beta/" target="_blank" rel="external">Arduino Scratch </a>elements to the amazing greeting cards already created.</span></p><p>Nollaig Shona!</p><p><img src="/wp-content/uploads/2014/12/IMAG0702_BURST0021-300x169.jpg" alt="IMAG0704_BURST002"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;The &lt;a href=&quot;https://scratched.gse.harvard.edu/hoc/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gaelscoil Thulach na nÓg&lt;/a&gt; were a great success las
      
    
    </summary>
    
      <category term="Projects" scheme="http://thebedlab.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>An LED Bar Graph</title>
    <link href="http://thebedlab.com/2014/12/08//2014/12/08/arduino-beginner-led-bar-graph//"/>
    <id>http://thebedlab.com/2014/12/08//2014/12/08/arduino-beginner-led-bar-graph//</id>
    <published>2014-12-08T11:45:20.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>For This Project We are going to use the pervious circuit (see the <a href="http://thebedlab.com/beginning-arduino-led-light-bar" title="LED Light Bar tutorial">LED light bar tutorial</a>) to build on top off. We don’t need to change it at all, we are just going to add to it and write some new code. What we are going to make is an LED bar graph. The kind of LED display used to give feedback for things like volume control on a speaker system. For us, we are simply going to use a Potentiometer to increase and decrease the number of LED’s turned on.</p><p>Components required:</p><ul><li><ol><li>Arduino board</li></ol></li><li><ol><li>Breadboard</li></ol></li><li><ol><li>Wires</li></ol></li><li><ol><li>8 x 220 Ω resistors</li></ol></li><li><ol><li>8 x LEDs</li></ol></li><li><strong>Potentiometer</strong> - this and 3 extra cables are the only additions to the pervious tutorial component list</li></ul><p>So here is the original circuit from the LED light bar tutorial.</p><p><img src="http://thebedlab.com/wp-content/uploads/2014/11/full-circuit-1024x621.png" alt="full LED Light Bar circuit"></p><p>Now we add in the Potentiometer.</p><p><img src="/wp-content/uploads/2014/11/led-bar-graph1-1024x543.png" alt="led bar graph"></p><p>If thats a little overwhelming, here is the potentiometer circuit on its own.</p><p><img src="http://thebedlab.com/wp-content/uploads/2014/11/potentiometer-1024x518.png" alt="potentiometer"></p><p>That’s not so complex at all.</p><p>The potentiometer acts as a voltage divider, which basically means that the voltage seen on the middle pin will be somewhere between the voltage levels applied to the other two pins. You can change the voltage on the middle pin by turning the knob, but it will never go outside the bounds of the voltages on the other two pins. In the circuit above, it means that we can turn the knob on the potentiometer to get any voltage between 0V and 5V on the middle pin. This pin is then connected to our analog input (A0 on the Arduino board). The Arduino reads the voltage level and performs an Analog to Digital Conversion (ADC), i.e. it changes the voltage to a number between 0 and 1023. This is just a simple scale to represent voltage level where 0 = 0V and 1023 = 5V.</p><p>The biggest change from the LED Light bar is the code we use. Create a new Sketch and add the following:</p><p>[c]</p><p>//Define which analog input used for potentiometer</p><p>const int potentiometer = A0;</p><p>//number of LEDs in our array</p><p>const int numberOfLEDs = 8;</p><p>// digital pins corresponding to our LED circuits</p><p>int leds[] = {2,3,4,5,6,7,8,9};</p><p>void setup(){</p><p>// loop through our digital pins to set them to Output</p><p>for(int i =0; i &amp;lt; numberOfLEDs; i++){</p><p>pinMode(leds[i], OUTPUT);</p><p>}</p><p>}</p><p>void loop(){</p><p>// take a reading from the potentiometer</p><p>int reading = analogRead(potentiometer);</p><p>// for an explanation of the map function, see below</p><p>int level = map(reading, 0, 1023, 0, numberOfLEDs);</p><p>for(int i = 0; i &amp;lt; numberOfLEDs; i++){</p><p>if(i &amp;lt; level){</p><p>digitalWrite(leds[i], HIGH);</p><p>} else {</p><p>digitalWrite(leds[i], LOW);</p><p>}</p><p>}</p><p>}</p><p>[/c]</p><p><strong>The map function</strong> takes five parameters used to map a value in one scale range to another scale. We are looking to map each LED 8 steps as values between 0 &amp; 1023 (because this is the range of readings the Analog input can read).</p><p>The Map() function’s five parameters are:</p><ul><li>The current <strong>value</strong> we wish to map to a particular scale </li><li>The <strong>fromLow</strong> value which set’s the minimum value of the scale we are mapping from, in our case the minimum value that can be read from the analog pin A0 i.e. 0 </li><li>The <strong>fromHigh</strong>, which is the maximum value for the scale we a mapping from, 1023 in our case</li><li>The <strong>toLow</strong> which is 0 in our case as we will have 0 LED lighting when the reading is 0 </li><li>The <strong>toHigh</strong> which is 8 in this example as we want all our LED’s lighting when the potentiometer is turned up to full </li></ul><p>Now plug upload the code to the Arduino and you should have the result shown below.</p><p>This Tutorial is based <a href="http://blog.jonnie.io/led-bar-graph/" title="jonnie.io : led-bar-graph" target="_blank" rel="external">on a post on my own blog</a>.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For This Project We are going to use the pervious circuit (see the &lt;a href=&quot;http://thebedlab.com/beginning-arduino-led-light-bar&quot; title=&quot;
      
    
    </summary>
    
      <category term="Projects" scheme="http://thebedlab.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>An LED Light Bar</title>
    <link href="http://thebedlab.com/2014/12/01//2014/12/01/beginning-arduino-led-light-bar//"/>
    <id>http://thebedlab.com/2014/12/01//2014/12/01/beginning-arduino-led-light-bar//</id>
    <published>2014-12-01T11:00:43.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>For the second project in our Beginning Arduino series I decided to build an LED Light Bar (think of Knight Rider). This will teach us some of the basics of working with multiple outputs and it will allow us to build things like Christmas light decorations. We will also gain a good foundation for working with a 7 Segment LED which we will look at in a later date.</p><p>What we need:</p><ul><li><ol><li>Arduino board</li></ol></li><li><ol><li>Breadboard</li></ol></li><li><ol><li>Wires</li></ol></li><li><ol><li>8 x 220 Ω resistors</li></ol></li><li><ol><li>8 x LEDs</li></ol></li></ul><p>It isn’t essential to have 8 LEDS/Resistors, you can have less or more you just need to have a resistor for each LED and a digital out on the Arduino.</p><p>Put all the components together as shown in the image below</p><p><img src="http://thebedlab.com/wp-content/uploads/2014/11/full-circuit-1024x621.png" alt="full LED Light Bar circuit"></p><p>In case that circuit is a little overwhelming here is a circuit with just a single LED wired up. All the other LED’s follow the same layout but with their input from a different digital out on the Arduino.</p><p><img src="http://thebedlab.com/wp-content/uploads/2014/11/single-circuit-1024x553.png" alt="single circuit"></p><p>Now fire up the Arduino IDE and create a new sketch with the following code:</p><p>[c]</p><p>void setup(){</p><p>//looping through the digital pins 2-9</p><p>//and setting the mode to output</p><p>for(int i= 2;i &amp;amp;amp;amp;amp;amp;amp;lt;= 9;i++){</p><p>pinMode(i, OUTPUT);</p><p>}</p><p>}</p><p>// Simple function to loop through all LEDs to turn them off</p><p>void turnLEDsOff(){</p><p>for(int i= 2;i &amp;amp;amp;amp;amp;amp;amp;lt;= 9;i++){</p><p>digitalWrite(i, LOW);</p><p>// wait 200ms</p><p>delay(200);</p><p>}</p><p>}</p><p>//main loop</p><p>void loop(){</p><p>// move through the LEDs lighting single led at time</p><p>for(int i= 2;i &amp;amp;amp;amp;amp;amp;amp;lt;= 9;i++){</p><p>//turn off All LEDs</p><p>turnLEDsOff();</p><p>// turn on single LED @ position i</p><p>digitalWrite(i, HIGH);</p><p>// wait 200ms</p><p>delay(200);</p><p>}</p><p>// same as above but in reverse order</p><p>for(int i= 2;i &amp;amp;amp;amp;amp;amp;amp;lt;= 9;i++){</p><p>//turn off All LEDs</p><p>turnLEDsOff();</p><p>// turn on single LED @ position i</p><p>digitalWrite(i, HIGH);</p><p>// wait 200ms</p><p>delay(200);</p><p>}</p><p>}</p><p>[/c]</p><p>Plug in the Arduino to a power supply and There you have it, an LED Light bar.</p><h2 id="Issues-I-experienced"><a href="#Issues-I-experienced" class="headerlink" title="Issues I experienced"></a>Issues I experienced</h2><p>While doing this project I came across an issue where the last LED would not light up for me. I tried swapping LED’s, resistors and cables but found nothing was faulty. Could the breadboard of been faulty? Sort of, but not really. I basically didn’t realise the was a break in the ground rail on the bottom. So I had to bridge the break ( see the image below).</p><p><img src="http://thebedlab.com/wp-content/uploads/2014/11/full-circuit-fix-1024x623.png" alt="full circuit with bridge fix"></p><p>But Why did the other LEDs on the same side of the break work? Because when an IO pin is configured as an OUTPUT, and is set LOW, it is effectively connected to ground, allowing the rest of the circuit to behave as normal</p><p>Here is a video show this issue:</p><p>I based this tutorial on a post I wrote for my own blog and on the LED Light Bar project in <a href="http://www.amazon.com/Arduino-Project-Handbook-Complete-Creating/dp/0992952603" title="Arduino Project Handbook" target="_blank" rel="external">Arduino Project Handbook</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;For the second project in our Beginning Arduino series I decided to build an LED Light Bar (think of Knight Rider). This will teach us so
      
    
    </summary>
    
      <category term="Tutorials" scheme="http://thebedlab.com/categories/Tutorials/"/>
    
    
      <category term="Arduino" scheme="http://thebedlab.com/tags/Arduino/"/>
    
      <category term="Beginner" scheme="http://thebedlab.com/tags/Beginner/"/>
    
      <category term="tutorial" scheme="http://thebedlab.com/tags/tutorial/"/>
    
  </entry>
  
  <entry>
    <title>Retro GameBox Kit</title>
    <link href="http://thebedlab.com/2014/11/28//2014/11/28/retro-gamebox-kit//"/>
    <id>http://thebedlab.com/2014/11/28//2014/11/28/retro-gamebox-kit//</id>
    <published>2014-11-28T15:35:50.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><em>Project files: <a href="https://drive.google.com/folderview?id=0B06YemMHUafCWGZvVVBneWUxTEU&amp;usp=sharing" target="_blank" rel="external">Google Drive</a></em></p><p>A while ago we ran a <a href="http://thebedlab.com/retro-gamebox-workshop-rua-red-digital-week/">workshop in Rua Red</a>, where the participants built their own Arduino-powered Retro games console. It was a great success; all the consoles worked and we all got a little bit better at Space Invaders, Parachutes, Asteroids and Sudoku.</p><p>In <a href="http://thebedlab.com/gearing-up-for-retro-gamebox-workshop/">preparation for that workshop</a>, I put in a good bit of work sourcing parts cheaply both online and locally. On top of that, we all chipped in with making up an instruction document, getting the tools we’d need together and checking that stuff actually worked. When the workshop went off so well, we got to thinking that it’d make for a really nice kit. Especially since all the hard kit preparation work was already done!<figure id="attachment_359" style="width: 150px" class="wp-caption alignright"></figure></p><p><img src="http://thebedlab.com/wp-content/uploads/2014/10/GameBox-150x150.jpg" alt="GameBox"><figcaption class="wp-caption-text">Lunch Box Case</figcaption> </p><p>One remaining task for packaging the Retro GameBox up into kit form was the project’s enclosure. You may remember that we were using lunch boxes on the night as our console cases. Well, I recently started playing around with laser cutting, so did up a quick enclosure using <a href="http://www.makercase.com/" target="_blank" rel="external">http://www.makercase.com/</a> and added in all the mounting holes for the hardware with Inkscape.</p><p>The design files (available in the Project files link at top) are still a little rough and will definitely be improved in the future but I’m pretty happy with this as a starting point! It was made with 4mm Birch Plywood Moisture Resistant BB/BB(MR) from <a href="http://www.woodworkers.ie" target="_blank" rel="external">woodworkers.ie</a>. We decided to go down the wood route because you really can’t get much more retro than that.</p><p><img src="http://thebedlab.com/wp-content/uploads/2014/11/RGB-Bottom-1024x682.jpg" alt="RGB-Profile"></p><p>Among the changes I’d like to make are:</p><ul><li>Change the box design from T-Slot to Finger joints for everything but the top face, so that we can save on nuts/bolts <ul><li>Means we’ll need some corner pads on the bottom so that it sits on a level surface with no wobbles</li></ul></li><li>Our logo didn’t come out in the final DXF file, so we’d need to fix that</li><li>Maybe some branding on the top face too</li></ul><p>Once the design has been fixed up, we’ll get it up on thingiverse and also release the project as a kit. Feel free to comment below if you’d be interested in the kits or have any feedback/suggestions for us. Who knows, maybe this time next year we’ll be showing it on the Late Late Toy Show!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;Project files: &lt;a href=&quot;https://drive.google.com/folderview?id=0B06YemMHUafCWGZvVVBneWUxTEU&amp;amp;usp=sharing&quot; target=&quot;_blank&quot; rel=&quot;ext
      
    
    </summary>
    
      <category term="Projects" scheme="http://thebedlab.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>BattleShots</title>
    <link href="http://thebedlab.com/2014/11/25//2014/11/25/battleshots//"/>
    <id>http://thebedlab.com/2014/11/25//2014/11/25/battleshots//</id>
    <published>2014-11-25T18:01:33.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>So I made a game…</p><p><img src="http://thebedlab.com/wp-content/uploads/2014/11/Build1.jpg" alt="Build1"></p><p>Battleshots has been born… Its a drinking game based on battleships. You get 5 ships, 1X5 test tubes, 1X4, 2X3 and 1X2 test tubes. Fill those tubes with a responsible level of the alcohol of your choice. The aim of the game is to sink all your buddies ships before they sink yours! And there’s drinking. You get hit and you take a shot… ALL the fun. Anywho… Proof of the fun can be found here:</p><p><img class="aligncenter" src="https://lh3.googleusercontent.com/-TI2GKHaj5q4/U8EanpUlhDI/AAAAAAAAJvs/GZ9xfnl-9dM/w1153-h865-no/IMG_20140711_222231.jpg" alt=""></p><p>I’ve made some changes from the above to make everything symmetrical and the board wider as the slot for the upright piece in the above photo was very close to the edge and could easily break. I’ve put the files on thingiverse for anyone wanting a go: <a href="http://www.thingiverse.com/thing:561822" target="_blank" rel="external">http://www.thingiverse.com/thing:561822</a></p><p>The design is pretty straightforward and the link covers the basics of how to put it together. In terms of assembly I thought I’d talk through some of the design. Firstly you’ll need:</p><ul><li>1* 600*400mm sheet of 3mm white acrylic</li><li>2* 600*400mm sheets of 3mm laserply</li><li>8* 120mm carraige bolts (M6 I think…) and 24 nuts to do the gaps (or some tubing cut to length… that would be neater)</li><li>A purple whiteboard marker</li><li>Test Tubes: <a href="http://www.amazon.co.uk/dp/B005ZR5S8W/" target="_blank" rel="external">http://www.amazon.co.uk/dp/B005ZR5S8W/</a> You need 40 to have a couple of spares so 60 may be overkill</li><li>A laser cutter</li></ul><p>The whole thing cost around £30 (sans the lasercutter) but I think it could be done for 20-25 if you find a cheap supplier for the test tubes. Anywho I thought I would talk through providing contrast on lasercut acrylic. I thought the purple on white came out really well and was very simple to do.</p><p><img src="/wp-content/uploads/2014/11/Capture1.png" alt="Capture"></p><p>Its very straightforward. Just engrave on the material and then highlight the crap out of it. Use a whiteboard marker rather than a permanent marker. In the third photo above you can see one pass. If you clean it off with a papertowel and do a couple of passes you will have a similar output to the final photo… Neat, eh?</p><p>I have since seen acrylic paint on solid engravings on transparent acrylic which looks lovely too and I must try out in the future!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So I made a game…&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://thebedlab.com/wp-content/uploads/2014/11/Build1.jpg&quot; alt=&quot;Build1&quot;&gt;&lt;/p&gt;
&lt;p&gt;Battleshots has been 
      
    
    </summary>
    
      <category term="Projects" scheme="http://thebedlab.com/categories/Projects/"/>
    
    
      <category term="tutorial" scheme="http://thebedlab.com/tags/tutorial/"/>
    
      <category term="Drinking" scheme="http://thebedlab.com/tags/Drinking/"/>
    
      <category term="Lasercutter" scheme="http://thebedlab.com/tags/Lasercutter/"/>
    
  </entry>
  
  <entry>
    <title>Edison as an IoT Device</title>
    <link href="http://thebedlab.com/2014/11/24//2014/11/24/edison-introduction-as-an-iot-device//"/>
    <id>http://thebedlab.com/2014/11/24//2014/11/24/edison-introduction-as-an-iot-device//</id>
    <published>2014-11-24T15:56:32.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://thebedlab.com/wp-content/uploads/2014/11/20141124_134215.jpg" alt="Introduction to Edison"> </p><h1 id="Introduction-to-Edison"><a href="#Introduction-to-Edison" class="headerlink" title="Introduction to Edison"></a>Introduction to Edison</h1><p>I’ve been playing with the Edison that I got at the hardware hackathon BedLab attended a few weeks back. Thanks to the guys from Intel for donating a few to the BedLab fund. (Full disclosure on the post, I work for Intel over in London (<a href="http://www.cities.io" target="_blank" rel="external">http://www.cities.io</a> so I’ll try to keep the gushing praise to a minimum)</p><p><img src="http://thebedlab.com/wp-content/uploads/2014/11/20141124_155131-1024x768.jpg" alt="20141124_155131"></p><p>Its pretty cool, out of the box its a lot more functional than the Gen one Intel Galileo and was pretty easy to get updated and up and running. I won’t go into the detail of setting it up as there was a pretty straightforward step by step guide for doing it. Broadly the steps are:</p><ul><li>Install FTDI driver for the board</li><li>Install Arduino IDE with Intel addon</li><li>Install Edison drivers</li></ul><p>Being on the internal trial for the Edison pre release they did a good job of integrating all the tools into one installer in order to talk to and work with the board.</p><p>The drivers in particular are cool, they let you:</p><ul><li>connect to the device over serial (using putty to access the linux side of things),</li><li>Transfer Arduino scripts if you want to program it via Arduino</li><li>Access the storage on the Edison as an external drive</li></ul><p>So pretty functional. Anywho links are here…</p><blockquote><p>Getting started: <a href="https://communities.intel.com/docs/DOC-23147" target="_blank" rel="external">https://communities.intel.com/docs/DOC-23147</a>.</p></blockquote><p>The one quirk I’ll say is that you need two USB’s to connect to a computer to do the programming, which is a little cumbersome.I set mine up and connected it to my home wifi and then just SSH’ed into it, this is where you should be at once you complete the above getting started guide.</p><p>Some other handy things to know when playing with the device. You are not limited to Yocto, the native Linux distro that comes with the board. If you like to work through Python or Node you can use their package managers to get most things working. Working with Yocto itself can be challenging for the hobbyist. There’s no apt-get for instance, which is a bit of a pain. Yocto was designed to be for robust embedded applications. Its designed to be made from source for a specific application. Its a barebones version of linux where you only load the parts of the stack you need for your application. The theory holds that the less stuff on the build the less can go wrong and the more robust your system will be.</p><p>So if you want to make a smart thermostat you can only load the systems you need, if you want to prototype something though it can take 4 hours to add that new wifi driver and build the system again from source. If you want to play with Debian on the board Emutex have released a debian build at <a href="http://www.emutexlabs.com/blog/220-emutex-release-ubilinux-for-intel-edison" target="_blank" rel="external">emutexlabs.com</a></p><p>The next handy thing is accessing the edison as an external hard drive. You can plug it in and transfer over any files you want. SCP also works if you want to go down that route but if you want to transfer big files or pass information via a PC easily this is a nice trick. Found the inspiration here:  <a href="https://communities.intel.com/thread/55510" target="_blank" rel="external">https://communities.intel.com/thread/55510</a>. Once you’ve transferred your files from the PC to the edison, the next step is to mount the drive on the Edison  itself.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">rmmod g_multi</div><div class="line"></div><div class="line">mkdir /update</div><div class="line"></div><div class="line">losetup -o 8192 /dev/loop0 /dev/disk/by-partlabel/update</div><div class="line"></div><div class="line">mount /dev/loop0 /update</div><div class="line">``` </div><div class="line"></div><div class="line">Then <span class="keyword">if</span> you want to reverse the process:</div><div class="line"></div><div class="line">```bash </div><div class="line"><span class="built_in">cd</span> /</div><div class="line">modprobe g_multi</div><div class="line">umount /update</div><div class="line"><span class="keyword">then</span> pull the usb cable and re-insert it, at <span class="built_in">which</span> stage the disk should re-appear on your host machine.</div></pre></td></tr></table></figure><p>Finally there’s been some nice benchmarking done by <a href="raspberry-pi-beaglebone-black-intel-edison-benchmarked">David Hunt</a> (He also has made some pretty cool photography hacks, its worth checking out his work)</p><h1 id="Cloud-Infrastructures"><a href="#Cloud-Infrastructures" class="headerlink" title="Cloud Infrastructures"></a>Cloud Infrastructures</h1><p>The Edison is pitched as an enabler of the internet of things (IoT) so I thought I would talk a little bit about using the Edison as a platform for sensors. There are lots of cloud based infrastructures that one can use to send data from these devices. I’m going to stick to the Linux side of things as I’m used to operating in that environment rather than through the arduino cross compiler.</p><p>There’s actually an IoT development kit baked into the Edison, it posts to an intel backend. It seemed quick to setup, I had a bit of a play of a Monday evening to see what its like. There’s a tutorial <a href="http://iotkit-comm-js.s3-website-us-west-2.amazonaws.com" target="_blank" rel="external">here</a> if you’re interested. There’s a node and C version depending on preference. In an hour or so I had an account setup and the device associated with its backend sending a virtual sensor reading. Can’t speak to its scalability/feature set but it had a shallow learning curve at the very least.</p><p>Another option is to build your own cloud storage system. At Bedlab this is becoming a bit of a specialty with with a bunch of different types of IoT style systems with various time series datastore types being made and even (feel free to correct me here guys)  3 RESTful API’s being built at this stage for various projects. Check out the following for more info:</p><ul><li>BrewLab backend storage and graphing</li><li>NodeRed implementation for Treo</li><li>How to build your own RESTful API tutorial over at <a href="http://blog.jonnie.io/creating-a-restful-api-with-node-js/" target="_blank" rel="external">http://blog.jonnie.io/creating-a-restful-api-with-node-js/</a> by our own Jonnie.</li></ul><p>There’s other online based systems that can quickly be setup to do the heavy lifting for your IoT device. I’ve had a play with GERAS from the guys over at www.1248.io, its quite good, doing exactly what you need it to, reminiscent of the old Pachube system. Xively is probably the best known system. Formerly Cosm, Formerly Pachube… Its so good they named it trice. Anywho, how I’ve finished kludgening that previous sentence into my post lets wrap up. I’ll write a follow up post on playing with the Edison over Xively. Stay tuned for more .</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://thebedlab.com/wp-content/uploads/2014/11/20141124_134215.jpg&quot; alt=&quot;Introduction to Edison&quot;&gt; &lt;/p&gt;
&lt;h1 id=&quot;Introduction-to
      
    
    </summary>
    
      <category term="Projects" scheme="http://thebedlab.com/categories/Projects/"/>
    
    
  </entry>
  
  <entry>
    <title>Turning on an LED from a Button</title>
    <link href="http://thebedlab.com/2014/11/16//2014/11/16/beginning-arduino-push-button-led//"/>
    <id>http://thebedlab.com/2014/11/16//2014/11/16/beginning-arduino-push-button-led//</id>
    <published>2014-11-16T15:15:31.000Z</published>
    <updated>2017-09-21T15:20:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>So you want to Learn to program and build projects with Arduino. Me too, and I want to help you learn from my experience, as I too am a beginner.</p><p>I could do the boring, pointless Arduino version of Hello Wold, <a href="http://arduino.cc/en/Tutorial/Blink?from=Tutorial.BlinkingLED" title="Boring Hello World Blink tutorial" target="_blank" rel="external">Blink!</a>, tutorial that most people start with, but it doesn’t involve enough as far as I am concerned ( it’s all already done for you), but go ahead if you feel its worth it. For me, I want to be able to interact with it.</p><p>So for my first Arduino project I want to press a button to turn on an LED. This involves 2 Arduino Fundamentals, reading input (the button), processing it in our program (an Arduino sketch) and output a result ( turning on or off an L.E.D.).</p><p>so without boring you, lets Jump straight in…</p><p><strong>Components we need</strong>:</p><ul><li>Arduino</li><li>Breadboard</li><li>Wires</li><li>LED</li><li>Push Button</li><li>1 x 10k Ω Resistor</li><li>1 x 220 Ω</li></ul><p>First I Followed the Tutorial in <a href="http://www.amazon.com/Arduino-Project-Handbook-Complete-Creating/dp/0992952603" target="_blank" rel="external">Arduino Project Handbook</a> by setting up my circuit as in the image below:</p><p><img src="http://thebedlab.com/wp-content/uploads/2014/11/Screen-Shot-2014-11-17-at-10.05.48-PM-1024x518.png" alt="Push Button LED circuit"></p><p><strong>IMPORTANT: </strong> The LED legs must be in the correct direction, make sure the Negitive Leg ( the shorter leg on the side of the flat edge of the LED) is connected to the ground and the Positive Leg ( the longer leg at the side of the rounded edge of the LED) is connected to the input pin, otherwise you will likely burn out your LED.</p><p>I then started up the Adruino IDE, available <a href="http://arduino.cc/en/Main/Software" title="Arduino Downloads" target="_blank" rel="external">here</a>.</p><p>Inside the sketch I added the following code:</p><p>[c]</p><p>const int buttonPin = 2;</p><p>const int ledPin = 13;</p><p>int buttonState = 0;</p><p>void setup(){</p><p>pinMode(ledPin, OUTPUT);</p><p>pinMode(buttonPin, INPUT);</p><p>}</p><p>void loop(){</p><p>buttonState = digitalRead(buttonPin);</p><p>if(buttonState == HIGH){</p><p>digitalWrite(ledPin, HIGH);</p><p>} else{</p><p>digitalWrite(ledPin, LOW);</p><p>}</p><p>}</p><p>[/c]</p><p>If you need more information about what the code is doing, have a look at the <a href="http://arduino.cc/en/Reference/HomePage" target="_blank" rel="external">Reference page</a>, but it should be mostly obvious, I hope.</p><p>Selected the Arduino Uno the menu: <strong>Tools &gt; Board &gt; Arduino Uno</strong> </p><p><img src="http://blog.jonnie.io/wp-content/uploads/2014/11/Select-Uno-1024x949.png" alt="Select Uno"></p><p>Then select the Arduino Port:</p><ul><li>For Linux/windows <strong>Tools &gt; Board &gt; Comx</strong> where x is usually 3 or higher</li><li>For Mac <strong>Tools &gt; Board &gt; tty.usbmodemxxxx</strong> where xxxx is some number</li></ul><p><img src="/wp-content/uploads/2014/11/Screen-Shot-2014-11-16-at-7.01.13-PM-1024x901.png" alt="Screen Shot 2014-11-16 at 7.01.13 PM"></p><p>Then plug in the USB into your computer and Arduino and upload the code using the button as shown in the picture below</p><p><img src="http://blog.jonnie.io/wp-content/uploads/2014/11/upload-to-Arduino-856x1024.png" alt="upload to Arduino"></p><p>When the program is uploaded you are supposed to be able to press the the button which the program is continuously reading in the loop function and light the L.E.D. while the button is pressed….</p><p>BUT…… for me this was not the case, at least not completely. I found that when I put my hand anywhere near the circuit without actually touching the button the L.E.D. would still light up and sometimes the L.E.D. would just light up and stay on with out even touching the button as shown in the video below.</p><p>Frustrated yet? I was. So what to do when the instructions don’t work? Well for me usually I turn to <a href="http://stackoverflow.com/" target="_blank" rel="external">stackoverflow</a> for programming problems. So I had a look on the <a href="http://stackexchange.com/" target="_blank" rel="external">stackexchange</a> which is the parent website of stack overflow and found an <a href="http://electronics.stackexchange.com/" title="electronics.stackexchange.com" target="_blank" rel="external">electronics subsection</a>.</p><p>So I posted my issue, along with the steps I took myself to try and solve the problem (<strong>N.B.:</strong> <em>if you go to any stack exchange and don’t show you made an effort, often you will be dismissed with comments like “have you even tried Googling it yourself”, So make the effort</em>)</p><p>So here was <a href="http://electronics.stackexchange.com/questions/137220/why-when-i-touch-the-input-cable-or-put-my-hand-near-it-the-led-comes-on" title="StackExchange Question" target="_blank" rel="external">my Question to the community</a></p><p>What I learned was that the reason the L.E.D was lighting when my hand was close to the circuit was due to <em>ambient electromagnetic interference</em> . As ‘<a href="http://electronics.stackexchange.com/users/4940/shubham" target="_blank" rel="external">Shubham</a>’ explained to me</p><blockquote><p>It’s because your button pin is floating (susceptible to ambient electromagnetic interference).</p></blockquote><p>All the second resistor is doing is draining a little current from power to ground, when it should actually be functioning as the pull-down resistor for the button pin.To fix this issue I made the following change to the circuit:</p><p>I changed this:</p><p><img src="http://blog.jonnie.io/wp-content/uploads/2014/11/Floating-button.png" alt="Floating Button"></p><p>To this:</p><p><img src="http://blog.jonnie.io/wp-content/uploads/2014/11/non-floating-Button.png" alt="Non Floating Button: Resistor acting as pull down resistor"></p><p>And now the Circuit behaves as expected.</p><p>And there you go…a functional Arduino beginners project. I know some of you might be thinking &#8220;is it not a bit complex for simply turning on an L.E.D&#8221;. For that purpose yes, it is but imagine adding a few buttons, a few motors and a bit of work to the program, and it could turn into a basic remote controlled car. Or swap out the button for a light sensor and you could have an automated light that comes on when it gets dark. The possibilities are endless. But don’t worry, like you I’m a new to this too , so we can work on it together…</p><p>I based this post on a post I wrote for <a href="http://blog.jonnie.io/push-button-control-led/" target="_blank" rel="external">my own blog</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;So you want to Learn to program and build projects with Arduino. Me too, and I want to help you learn from my experience, as I too am a b
      
    
    </summary>
    
      <category term="Tutorials" scheme="http://thebedlab.com/categories/Tutorials/"/>
    
    
      <category term="Arduino" scheme="http://thebedlab.com/tags/Arduino/"/>
    
      <category term="Beginner" scheme="http://thebedlab.com/tags/Beginner/"/>
    
      <category term="tutorial" scheme="http://thebedlab.com/tags/tutorial/"/>
    
  </entry>
  
</feed>
